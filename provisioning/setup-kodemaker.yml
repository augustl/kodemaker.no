---
- hosts: new-servers
  remote_user: deploy
  become: true
  tasks:
   - name: Ensure EPEL is enabled
     yum: name=epel-release state=present

   - name: Set SELinux permissive
     selinux:
       policy: targeted
       state: permissive

   - name: Install nginx
     yum: name=nginx state=present

   - name: Ensure nginx is running
     service: name=nginx state=started enabled=true

   - name: Create letsencrypt directories
     file: path={{ item }} state=directory owner=nginx group=www mode=775
     with_items:
       - /var/www/letsencrypt
       - /etc/letsencrypt

   - name: Check if certificate exists
     stat:
       path: /etc/letsencrypt/live/www.kodemaker.no/fullchain.pem
     register: cert_stat

   - name: Configure nginx
     template: src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf
     notify:
      - restart nginx

   - name: Create sites-enabled/available directories
     file: state=directory path=/etc/nginx/{{ item }} owner=nginx group=nginx
     with_items:
      - sites-enabled
      - sites-available

   - name: Write sites-available/kodemaker.no
     template: src=templates/sites-available/kodemaker.no.j2 dest=/etc/nginx/sites-available/kodemaker.no
     notify:
      - restart nginx
      - restart varnish

   - name: Symlink kodemaker.no into sites-enabled
     file: src=/etc/nginx/sites-available/kodemaker.no
           dest=/etc/nginx/sites-enabled/kodemaker.no
           owner=nginx
           group=nginx
           state=link

   - name: Install varnish
     yum: name=varnish state=present

   - name: Ensure varnish is running
     service: name=varnish state=started enabled=true

   - name: Configure varnish sysconfig
     template: src=templates/varnish.j2 dest=/etc/varnish/varnish.params
     notify:
      - restart varnish

   - name: Configure varnish vcl
     template: src=templates/varnish.vcl.j2 dest=/etc/varnish/default.vcl
     notify:
      - restart varnish

   - name: Check if iptables is operational (it isnt on VPSes)
     stat: path=/etc/sysconfig/iptables
     register: iptables_info

   - name: open port 80 in firewall
     lineinfile: dest=/etc/sysconfig/iptables regexp="-p tcp --dport 80 -j ACCEPT" line="-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT" insertafter="-p tcp --dport 22 -j ACCEPT"
     when: iptables_info.stat.exists == true
     notify:
      - restart iptables

   - name: Install jdk7
     yum: name=java-1.7.0-openjdk-devel state=present

   - name: Install git
     yum: name=git state=present

   - name: Install node
     yum: name=nodejs state=present

   - name: Install npm
     yum: name=npm state=present

   - name: Create bin folder
     file: state=directory path=/home/{{ansible_ssh_user}}/bin owner={{ansible_ssh_user}} group=www

   - name: Install lein
     get_url: dest=/home/{{ansible_ssh_user}}/bin/lein url="https://raw.github.com/technomancy/leiningen/stable/bin/lein"

   - name: Make lein executable
     file: path=/home/{{ansible_ssh_user}}/bin/lein mode=755

   - name: Upload build-site script
     template: src=files/build-site.sh dest=/home/{{ansible_ssh_user}}/build-site.sh mode=755 owner={{ansible_ssh_user}} group=www

   - name: Upload build-queue script
     template: src=files/build-queue.js dest=/home/{{ansible_ssh_user}}/build-queue.js owner={{ansible_ssh_user}} group=www
     notify: restart build-queue

   - name: Upload mail-sender scripts
     template: src=files/{{item}} dest=/home/{{ansible_ssh_user}}/{{item}} owner={{ansible_ssh_user}} group=www
     with_items:
       - mail-config.js
       - mail-sender.js
       - send-mail.js
     notify: restart mail-sender

   - name: Create SSH directory
     file: state=directory path=/home/{{ansible_ssh_user}}/.ssh/ owner={{ansible_ssh_user}} mode=0700

   - name: Upload SSH known hosts
     copy: src=files/known_hosts dest=/home/{{ansible_ssh_user}}/.ssh/known_hosts owner={{ansible_ssh_user}} mode=0600

   - name: Install node-forever
     npm: name=forever global=yes state=present

   - name: Check list of Node.js apps running.
     command: forever list
     register: forever_list
     changed_when: false
     become: true
     become_user: deploy

   - name: Start build-queue
     command: forever start /home/{{ansible_ssh_user}}/build-queue.js
     when: "forever_list.stdout.find('/home/{{ansible_ssh_user}}/build-queue.js') == -1"
     become: true
     become_user: deploy

   - name: Start mail-sender
     command: forever start /home/{{ansible_ssh_user}}/mail-sender.js
     when: "forever_list.stdout.find('/home/{{ansible_ssh_user}}/mail-sender.js') == -1"
     become: true
     become_user: deploy

   - name: Make sure build-queue is started after reboot
     cron: name="reboot-build-queue" special_time=reboot user="{{ansible_ssh_user}}" job="forever start /home/{{ansible_ssh_user}}/build-queue.js"

   - name: Make sure mail-sender is started after reboot
     cron: name="reboot-mail-sender" special_time=reboot user="{{ansible_ssh_user}}" job="forever start /home/{{ansible_ssh_user}}/mail-sender.js"

   - name: Add nginx to www group
     user: name=nginx group=www

   - name: Give www access to flush varnish cache
     file: path=/etc/varnish/secret group=www mode=660

   - name: Create kodemaker.no directory
     file: state=directory path=/var/www/kodemaker.no owner=nginx group=www mode=775
     notify:
      - restart nginx
      - restart varnish

   - name: Build site once every night
     cron: name="nightly-site-build" minute=0 hour=2 user="{{ansible_ssh_user}}" job="curl localhost/site/build"

   - name: Install certbot
     yum: name=certbot state=present
     when: use_ssl

   - name: Request certificates
     shell: |
       certbot certonly \
           --webroot -w /var/www/letsencrypt \
           -d {{item}} \
           --email christian@kodemaker.no \
           --non-interactive \
           --agree-tos
     when:
       - cert_stat.stat.exists == False
       - use_ssl
     with_items:
       - www.kodemaker.no
       - kodemaker.no

   - name: Renew certificates weekly
     cron:
       name: Renew letsencrypt certificate
       minute: 30
       hour: 2
       weekday: 1
       job: "certbot certonly --webroot -w /var/www/letsencrypt"
     when: use_ssl

  handlers:
   - name: restart nginx
     service: name=nginx state=restarted

   - name: restart iptables
     service: name=iptables state=restarted

   - name: restart varnish
     service: name=varnish state=restarted

   - name: restart build-queue
     command: forever restart /home/{{ansible_ssh_user}}/build-queue.js
     become: true
     become_user: deploy

   - name: restart mail-sender
     command: forever restart /home/{{ansible_ssh_user}}/mail-sender.js
     become: true
     become_user: deploy
